#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const caesar_cipher_1 = require("./caesar-cipher");
const chalk_1 = __importDefault(require("chalk"));
const chalk_animation_1 = __importDefault(require("chalk-animation"));
const inquirer_1 = __importDefault(require("inquirer"));
const nanospinner_1 = require("nanospinner");
const clipboardy_1 = __importDefault(require("clipboardy"));
//global variables
let key;
let text;
let cipheredText;
//sleep helper function
const sleep = (ms = 2000) => new Promise((r) => setTimeout(r, ms));
//add 'de'suffix to 'cipher'
function wordSwap(de, word, capitalize = false) {
    if (de && capitalize) {
        let str = ('de' + word.toLowerCase());
        return str.charAt(0).toUpperCase() + str.slice(1);
    }
    else if (de)
        return 'de' + word.toLowerCase();
    else
        return word;
}
async function info() {
    console.log(`
${chalk_1.default.bold("Caesar cipher")}
\n\tShift characters among by a certain amount to encode a text.
\t${chalk_1.default.blue("Character set:")}
        `);
    console.table(caesar_cipher_1.characters);
}
async function title() {
    const title = chalk_animation_1.default.glitch("Caesar cipher\n");
    await sleep(1000);
    title.stop();
}
async function getText() {
    const answer = await inquirer_1.default.prompt({
        name: 'input_text',
        type: 'input',
        message: 'Text?',
        default() { return 'Lorem ispum'; }
    });
    text = answer.input_text;
}
async function getKey(de = false) {
    const answer = await inquirer_1.default
        .prompt({
        name: 'input_number',
        type: 'number',
        message: 'Shift?'
    });
    if (!answer.input_number) { //if not a number
        console.log(chalk_1.default.bgRed("\n\tPlease enter a NUMBE\n"));
        await getKey();
    }
    else {
        key = answer.input_number;
        await getCipher(de);
    }
}
async function getCipher(de) {
    const spinner = (0, nanospinner_1.createSpinner)(`${wordSwap(de, 'Ciphering', true)} text...`).start();
    try {
        if (!de) {
            cipheredText = (0, caesar_cipher_1.cipher)(text, key);
        }
        else {
            cipheredText = (0, caesar_cipher_1.deCipher)(text, key);
        }
        await sleep(500);
        spinner.success({ text: chalk_1.default.green(`Text successfully ${wordSwap(de, 'ciphered')}`) });
    }
    catch (err) {
        spinner.error({ text: `${chalk_1.default.red("An error has occured:")} ${err}` });
    }
}
async function showResult(de = false) {
    console.log(`\n${chalk_1.default.blue(wordSwap(de, 'Cipher:', true))}`);
    console.log(`\n\t${chalk_1.default.bgBlue(chalk_1.default.black(cipheredText))}\n`);
}
async function copyToClipboard() {
    const answer = await inquirer_1.default.prompt({
        name: 'request-copy',
        type: 'confirm',
        message: 'Do you want to copy ciphered text to clipboard?',
        default() { return false; }
    });
    if (answer['request-copy']) {
        const spinner = (0, nanospinner_1.createSpinner)("Copying...").start();
        try {
            clipboardy_1.default.writeSync(cipheredText);
            await sleep(500);
            spinner.success({ text: chalk_1.default.green("Success") });
        }
        catch (err) {
            spinner.error({ text: `${chalk_1.default.red("An error has occured:")} ${err}` });
        }
    }
}
async function getOptions() {
    const answer = await inquirer_1.default.prompt({
        name: 'option',
        type: 'list',
        choices: [
            'cipher',
            'decipher',
            'info'
        ]
    });
    return answer.option;
}
//--- Execution order
async function run() {
    await title();
    const option = await getOptions();
    if (option == 'cipher') {
        await getText();
        await getKey();
        await showResult();
        await copyToClipboard();
    }
    else if (option == 'decipher') {
        await getText();
        await getKey(true);
        await showResult(true);
        await copyToClipboard();
    }
    else if (option == 'info') {
        info();
    }
}
run();
//---
